import { MediumArticle } from "../api/medium/types";

export const mockArticles: MediumArticle[] = [
  {
    title: "Mock Building My First Flutter App: Challenges and Lessons Learned",
    pubDate: "2025-03-02 08:02:41",
    link: "https://medium.com/@sanderdesnaijer/building-my-first-flutter-app-challenges-and-lessons-learned-49ad913b4941?source=rss-aae3af6fc2dd------2",
    guid: "https://medium.com/p/49ad913b4941",
    author: "Sander de Snaijer",
    thumbnail: "",
    description:
      '\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*0_kChEl_MolaVOZGDOwcoA.png"><figcaption>Mock Tabata whip timer app store</figcaption></figure><h4>Building my first Flutter app has been a nice experience, full of challenges, discoveries and learning moments. This post describes my journey from starting with zero mobile app development experience to launching an app to the Apple Store.</h4>\n<p>In 2022, I attended a software developer conference called <a href="https://frontmania.com/">Frontmania</a>, where I was introduced to Flutter for the first time. The presenters demonstrated how Flutter enables easy app development for multiple platforms, including phones, tablets, and desktops. I was particularly interested in Flutter’s potential for developing apps on both Android and iPhone, which seemed exciting and highly practical. Seeing the hot-reload feature made me excited about how it could significantly speed up development.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*utePQAHOKlC3aOqN-xzI9w.jpeg"><figcaption>Frontmania 2022 in Jaarbeurs Utrecht</figcaption></figure><p>Like many developers, my motivation began with a problem I wanted to solve for myself. For workouts I use a tabata timer, to have a good rhythm with rest and workout. Unfortunately, many apps are subscription based so I decided to make my own. Additionally I saw this as a perfect opportunity to learn mobile app development using Flutter after 2 years of thinking of doing. I aimed to build something functional for myself, small in scope with the end goal releasing it into the app store so I know the whole proces from start to end.</p>\n<p><strong>Getting Started</strong></p>\n<p>On November 4, 2024 I started with setting up the needed development tools and get to know Flutter and Dart. There are many good official and unofficial tutorials and guides to be found so I did not have much trouble setting everything up, and it was a nice feeling to see even a simple block on your phone in the end. The <a href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter">VS Code plugin</a> makes development very easy, offering features like starting up the project with a simulator, autocomplete to quick options to wrap and unwrap components.</p>\n<ul>\n<li><a href="https://docs.flutter.dev/get-started/install/macos/mobile-ios">setting up the environment</a></li>\n<li><a href="https://docs.flutter.dev/cookbook">cookbook</a></li>\n</ul>\n<h3><strong>Key steps in development</strong></h3>\n<p><strong>Setting up routes and basic flow</strong></p>\n<p>One of the first tasks was implementing navigation routes to manage the user flow between different screens. Learning how Flutter handles routes helped me understand how to manage state and screen transitions. From here pages or screens can be easily added.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*vzjtNLF0_vhIY9i_skEblQ.png"></figure><p><strong>Updating the Design</strong></p>\n<p>Design was an iterative process. I began with a simple, functional interface and refined it over time, improving layout, colours, and user interactions to make the experience smoother and more appealing. I had some ideas but mostly figured it out by making something, working a few days with it and then revise.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*g-LvD8pRuN6iewfXcW7GtA.png"><figcaption>Iterations of the start screen</figcaption></figure><p><strong>Adding Local Storage</strong></p>\n<p>To persist user data, I implemented storage using SQLite. This was my first encounter with managing databases in Flutter. It was challenging, because Flutter’s strong type system proved tricky as you have to be clear with the types. Reworking the app’s core logic led to countless battles with type errors, but every problem learned me something more.</p>\n<p>I found it hard to debug the database, so I’ve made a database route which shows the content of the database inside the app. This was not ideal, but workable, I hope there are better ways but could not find anything for the iPhone.</p>\n<p><strong>Adding more features</strong></p>\n<p>After the database and the core logic was in more features got added, like haptic feedback, statistics, landscape mode, more controls for your workout. It was fun creating these and testing it out on a real phone. I added adds which I wanted to let the user disable by paying a small one time fee, but after seeing the amount of work that is needed I wait first if people even want to buy.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*0446hVOR7M8X-W9ziHwxKQ.png"><figcaption>landscape mode</figcaption></figure><p><strong>Unit Testing (Better Late Than Never)</strong></p>\n<p>Unfortunately, unit testing came far too late in the process. Retrofitting tests after significant development was a lesson learned the hard way. Next time, testing will be integrated from the start. I wanted to focus more on learning Flutter and Dart but reworking logic made parts fail that could have been caught by tests.</p>\n<p><strong>Wrapping Up for Release</strong></p>\n<p>Creating documentation, screenshots, descriptions, a privacy policy, and support pages was a nice change from the app development, and with the help of some AI’s like ChatGPT this can be done pretty quick if you have all your data already present. For sounds, for example, I created a simple list with the sound name, author, and source, then let the AI generate additional descriptions.</p>\n<p><strong>Publishing to app store</strong></p>\n<p>Flutter has some great instructions <a href="https://docs.flutter.dev/deployment/ios">how to release an app </a>to the store. For the App Store of Apple it can take a while before you can start because some information needs to be processed. Here the timeline of work needed:</p>\n<ul>\n<li>\n<strong>December 27</strong>: Applied for a developer account.</li>\n<li>\n<strong>December 31</strong>: Received access to Store Connect.</li>\n<li>\n<strong>January 1</strong>: App was accepted, creating product page and fill in all needed data.</li>\n<li>\n<strong>January 2</strong>: Submitted the first release.</li>\n<li>\n<strong>January 6</strong>: Released version 1.0.1.</li>\n<li>\n<strong>January 6</strong>: Released version 1.0.2 (ads integration), spending over 2.5 hours navigating the update process.</li>\n</ul>\n<p>The first release got approved without any feedback, so that was a pleasant surprise. After you have a developer account the process went pretty smooth and fast. Also making a follow up release (because I forgot some links in the product page) was very fast.</p>\n<p><strong>Future Code Improvements</strong></p>\n<p>After completing the first version of my app, there are still many things I would like to improve</p>\n<ul>\n<li>\n<strong>Android support.</strong> Currently the app is only supported for the iPhone but I would like to make a version for the Android as well to see how many changes are needed to make it work.While simulators exist, I’ve decided to postpone this until I have a physical device for thorough testing.</li>\n<li>\n<strong>Code improvements. </strong>There’s still room for optimisation, including better code sharing and separating logic from components to improve reusability.</li>\n<li>\n<strong>More tests</strong>. I introduced tests late in development, but adding more will help ensure future updates don’t break existing functionality.</li>\n<li>\n<strong>Ad Removal via Payment. </strong>It’s a lot of work to set up in-app purchases. I would have liked to explore it, but decided to wait if there are any users at all before implementing it.</li>\n</ul>\n<p><strong>Final Thoughts</strong></p>\n<p>Coming from a React development background, picking up Flutter felt surprisingly smooth. The reactive programming model in Flutter was conceptually similar, and the hot reload feature was a game-changer. Being able to instantly see changes reflected on both my laptop and phone made the development process highly efficient and enjoyable.</p>\n<p>If you’re considering building your first app, my advice is to try Flutter out! And if you’re interested in the app you can download it here for free in the app store <a href="https://apps.apple.com/us/app/tabata-whip-timer/id6740058591">https://apps.apple.com/us/app/tabata-whip-timer/id6740058591</a></p>\n<img src="" width="1" height="1" alt="">\n',
    content:
      '\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*0_kChEl_MolaVOZGDOwcoA.png"><figcaption>Mock Tabata whip timer app store</figcaption></figure><h4>Building my first Flutter app has been a nice experience, full of challenges, discoveries and learning moments. This post describes my journey from starting with zero mobile app development experience to launching an app to the Apple Store.</h4>\n<p>In 2022, I attended a software developer conference called <a href="https://frontmania.com/">Frontmania</a>, where I was introduced to Flutter for the first time. The presenters demonstrated how Flutter enables easy app development for multiple platforms, including phones, tablets, and desktops. I was particularly interested in Flutter’s potential for developing apps on both Android and iPhone, which seemed exciting and highly practical. Seeing the hot-reload feature made me excited about how it could significantly speed up development.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*utePQAHOKlC3aOqN-xzI9w.jpeg"><figcaption>Frontmania 2022 in Jaarbeurs Utrecht</figcaption></figure><p>Like many developers, my motivation began with a problem I wanted to solve for myself. For workouts I use a tabata timer, to have a good rhythm with rest and workout. Unfortunately, many apps are subscription based so I decided to make my own. Additionally I saw this as a perfect opportunity to learn mobile app development using Flutter after 2 years of thinking of doing. I aimed to build something functional for myself, small in scope with the end goal releasing it into the app store so I know the whole proces from start to end.</p>\n<p><strong>Getting Started</strong></p>\n<p>On November 4, 2024 I started with setting up the needed development tools and get to know Flutter and Dart. There are many good official and unofficial tutorials and guides to be found so I did not have much trouble setting everything up, and it was a nice feeling to see even a simple block on your phone in the end. The <a href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter">VS Code plugin</a> makes development very easy, offering features like starting up the project with a simulator, autocomplete to quick options to wrap and unwrap components.</p>\n<ul>\n<li><a href="https://docs.flutter.dev/get-started/install/macos/mobile-ios">setting up the environment</a></li>\n<li><a href="https://docs.flutter.dev/cookbook">cookbook</a></li>\n</ul>\n<h3><strong>Key steps in development</strong></h3>\n<p><strong>Setting up routes and basic flow</strong></p>\n<p>One of the first tasks was implementing navigation routes to manage the user flow between different screens. Learning how Flutter handles routes helped me understand how to manage state and screen transitions. From here pages or screens can be easily added.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*vzjtNLF0_vhIY9i_skEblQ.png"></figure><p><strong>Updating the Design</strong></p>\n<p>Design was an iterative process. I began with a simple, functional interface and refined it over time, improving layout, colours, and user interactions to make the experience smoother and more appealing. I had some ideas but mostly figured it out by making something, working a few days with it and then revise.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*g-LvD8pRuN6iewfXcW7GtA.png"><figcaption>Iterations of the start screen</figcaption></figure><p><strong>Adding Local Storage</strong></p>\n<p>To persist user data, I implemented storage using SQLite. This was my first encounter with managing databases in Flutter. It was challenging, because Flutter’s strong type system proved tricky as you have to be clear with the types. Reworking the app’s core logic led to countless battles with type errors, but every problem learned me something more.</p>\n<p>I found it hard to debug the database, so I’ve made a database route which shows the content of the database inside the app. This was not ideal, but workable, I hope there are better ways but could not find anything for the iPhone.</p>\n<p><strong>Adding more features</strong></p>\n<p>After the database and the core logic was in more features got added, like haptic feedback, statistics, landscape mode, more controls for your workout. It was fun creating these and testing it out on a real phone. I added adds which I wanted to let the user disable by paying a small one time fee, but after seeing the amount of work that is needed I wait first if people even want to buy.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*0446hVOR7M8X-W9ziHwxKQ.png"><figcaption>landscape mode</figcaption></figure><p><strong>Unit Testing (Better Late Than Never)</strong></p>\n<p>Unfortunately, unit testing came far too late in the process. Retrofitting tests after significant development was a lesson learned the hard way. Next time, testing will be integrated from the start. I wanted to focus more on learning Flutter and Dart but reworking logic made parts fail that could have been caught by tests.</p>\n<p><strong>Wrapping Up for Release</strong></p>\n<p>Creating documentation, screenshots, descriptions, a privacy policy, and support pages was a nice change from the app development, and with the help of some AI’s like ChatGPT this can be done pretty quick if you have all your data already present. For sounds, for example, I created a simple list with the sound name, author, and source, then let the AI generate additional descriptions.</p>\n<p><strong>Publishing to app store</strong></p>\n<p>Flutter has some great instructions <a href="https://docs.flutter.dev/deployment/ios">how to release an app </a>to the store. For the App Store of Apple it can take a while before you can start because some information needs to be processed. Here the timeline of work needed:</p>\n<ul>\n<li>\n<strong>December 27</strong>: Applied for a developer account.</li>\n<li>\n<strong>December 31</strong>: Received access to Store Connect.</li>\n<li>\n<strong>January 1</strong>: App was accepted, creating product page and fill in all needed data.</li>\n<li>\n<strong>January 2</strong>: Submitted the first release.</li>\n<li>\n<strong>January 6</strong>: Released version 1.0.1.</li>\n<li>\n<strong>January 6</strong>: Released version 1.0.2 (ads integration), spending over 2.5 hours navigating the update process.</li>\n</ul>\n<p>The first release got approved without any feedback, so that was a pleasant surprise. After you have a developer account the process went pretty smooth and fast. Also making a follow up release (because I forgot some links in the product page) was very fast.</p>\n<p><strong>Future Code Improvements</strong></p>\n<p>After completing the first version of my app, there are still many things I would like to improve</p>\n<ul>\n<li>\n<strong>Android support.</strong> Currently the app is only supported for the iPhone but I would like to make a version for the Android as well to see how many changes are needed to make it work.While simulators exist, I’ve decided to postpone this until I have a physical device for thorough testing.</li>\n<li>\n<strong>Code improvements. </strong>There’s still room for optimisation, including better code sharing and separating logic from components to improve reusability.</li>\n<li>\n<strong>More tests</strong>. I introduced tests late in development, but adding more will help ensure future updates don’t break existing functionality.</li>\n<li>\n<strong>Ad Removal via Payment. </strong>It’s a lot of work to set up in-app purchases. I would have liked to explore it, but decided to wait if there are any users at all before implementing it.</li>\n</ul>\n<p><strong>Final Thoughts</strong></p>\n<p>Coming from a React development background, picking up Flutter felt surprisingly smooth. The reactive programming model in Flutter was conceptually similar, and the hot reload feature was a game-changer. Being able to instantly see changes reflected on both my laptop and phone made the development process highly efficient and enjoyable.</p>\n<p>If you’re considering building your first app, my advice is to try Flutter out! And if you’re interested in the app you can download it here for free in the app store <a href="https://apps.apple.com/us/app/tabata-whip-timer/id6740058591">https://apps.apple.com/us/app/tabata-whip-timer/id6740058591</a></p>\n<img src="" width="1" height="1" alt="">\n',
    enclosure: {},
    categories: [
      "flutter",
      "flutter-app-development",
      "programming",
      "mobile-app-development",
      "software-engineering",
    ],
  },
  {
    title: "Mock Creating a 3D-Printed Word Clock with Minute Accuracy",
    pubDate: "2025-02-09 11:18:24",
    link: "https://medium.com/@sanderdesnaijer/creating-a-3d-printed-word-clock-with-minute-accuracy-c8e0fd85bd16?source=rss-aae3af6fc2dd------2",
    guid: "https://medium.com/p/c8e0fd85bd16",
    author: "Sander de Snaijer",
    thumbnail: "",
    description:
      '\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Oood9OBeYQzVldK3RDAQ-g.jpeg"><figcaption>Mock Completed Dutch Word Clock — Accurate to the Minute</figcaption></figure><p>In my spare time, I created a word clock using Arduino. I designed it in Fusion 360 and printed it on the Bambu X1C. Many word clocks you find online have only 5-minute accuracy, which I didn’t like. My goal was to build one from scratch with minute accuracy in Dutch. To achieve this, I had to learn soldering, Arduino programming, and Fusion 360 — skills I had little experience with — making this project a great challenge.</p>\n<p><strong>Prototyping in TypeScript</strong></p>\n<p>Before starting the physical build, I planned everything out and <a href="https://sanderdesnaijer.github.io/typescript-dutch-wordclock/">created a prototype</a> in TypeScript. This allowed me to figure out how to achieve minute accuracy and arrange Dutch words sensibly on the grid. The prototype also helped generate data that I later used in the Arduino C++ code. Since I wasn’t familiar with C++, I researched where to start and found inspiration in a video by Leandro Linares, who upcycled a vintage clock into an Arduino word clock. Although his version had 5-minute accuracy, it gave me a strong foundation to improve upon.</p>\n<figure><img alt="Prototype dutch word clock showing index number" src="https://cdn-images-1.medium.com/max/970/1*iZ0YrsjFTHNI39DXJHY1gQ.png"><figcaption>Typescript prototype</figcaption></figure><p>The prototype was invaluable in refining the layout and fixing logical errors quickly. I used individually addressable LEDs arranged in a snake-like pattern on a 13x12 grid. For example, the first row was indexed from 0 to 12, the second from 25 to 13, the third from 26 to 39, and so on. I ultimately generated a multidimensional grid for every minute of the hour, mapping word positions to LED indices. For instance, at 2:13, the text reads “dertien over [currentHour]” (“thirteen past [currentHour]”). The prototype made it easy to determine which LEDs should light up.</p>\n<p><strong>Electronics &amp; Soldering</strong></p>\n<p>After finalising the prototype, I moved on to the electronics. Since I was new to this, I debugged every step carefully. My LED strip was about 5 meters long, so before cutting it into smaller pieces, I tested it with an Arduino example sketch to ensure it worked. Once confirmed, I proceeded to cut and solder the strips together.</p>\n<p>This step proved more difficult than expected. I struggled for a week with soldering — using different temperatures, flux, and techniques — but the solder wouldn’t stick properly. I eventually discovered that the quality of the solder itself made a huge difference. Upgrading to a better soldering material solved the problem. After connecting each new strip (13 in total), I tested it to catch any issues early. The final strip had 156 LEDs, all functioning correctly with the demo code.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*mTY0gzSDF1Ghw3hFSBgecg.jpeg"><figcaption>All the strips joined with the demo code</figcaption></figure><p><strong>3D Modeling, Coding &amp; Printing</strong></p>\n<p>With the electronics working, I moved on to designing the case in Fusion 360. I started by ensuring that one LED strip fit correctly. After a couple of attempts, I got the right dimensions. I then laid a sheet of paper over the LEDs and sketched the letter positions.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*2jWZ807bRC8xQstPNY76Kw.jpeg"><figcaption>Finding the right dimensions for a row of leds</figcaption></figure><p>At this point, I transitioned to the Arduino code. Porting the TypeScript logic to C++ was straightforward; I simply logged the arrays in JavaScript and used the data in Arduino. One challenge was that C++ requires uniform row lengths in multidimensional arrays. I solved this by padding unused elements with -1. Converting the logic to determine which LEDs should light up was then just a matter of simple loops and conditions.</p>\n<p>For the time I used a RTC (real time clock) module, to keep track of the time even when the Arduino has no power.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/955/1*097FxjefZkDVS9P4PGRQFw.jpeg"><figcaption>Printed grid with word clock code</figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/960/1*lcFWHWLoraFBvotTS8tAgw.jpeg"><figcaption>A paper with some written letters to make sense of the lights</figcaption></figure><p>With the letters and code ready, I ran the first full test. Most lights worked, but a few didn’t due to bad solder joints, which I fixed. The next step was building the rest of the case. This involved trial and error, as I initially didn’t leave enough space for wires, the Arduino, or the clock module. Adjusting these each time in Fusion 360 was frustrating until I discovered <em>variables</em>, which allowed me to change dimensions in one place instead of manually updating multiple values. This way I could easy make smaller prints of sections to try out if it fits before printing the complete model.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*C_Omaf0wffDczbrz7R7JMg.jpeg"></figure><p><strong>Final Touches &amp; Improvements</strong></p>\n<p>For the front panel, I wanted interchangeable letters to allow different fonts for varying moods. I used a monospaced font to evenly space the letters. The first print fit well but had an issue — letters with enclosed areas (e.g., “a,” “q,” “o”) lost their inner sections. I solved this by slightly cutting the inner shapes to keep them connected, which also gave the clock a unique style.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/960/1*MGX0pIpvCqbgJepaba4H3A.jpeg"><figcaption>Failed print of letters</figcaption></figure><a href="https://medium.com/media/107daabc1e1ef4c4559f30eadf698b01/href">https://medium.com/media/107daabc1e1ef4c4559f30eadf698b01/href</a><p>In the end, the clock worked and I was happy with it. There are still areas for improvement, such as reducing cable length, adding adjustable time settings, implementing more colour effects, improving light diffusion, supporting standard LED strips, and creating an English version. Despite the challenges, this project was an incredible learning experience, and I’m excited to refine it further.</p>\n<a href="https://medium.com/media/c17f2b5eeb41c8cf64d888735c757e1b/href">https://medium.com/media/c17f2b5eeb41c8cf64d888735c757e1b/href</a><figure><img alt="" src="https://cdn-images-1.medium.com/max/960/1*b6_VwLcVZEl7jOB3VuBehA.jpeg"><figcaption>The finished product in the back</figcaption></figure><p>Links:</p>\n<ul>\n<li><a href="https://sanderdesnaijer.github.io/typescript-dutch-wordclock/">prototype demo</a></li>\n<li><a href="https://github.com/sanderdesnaijer/arduino-dutch-wordclock">arduino code</a></li>\n</ul>\n<img src="" width="1" height="1" alt="">\n',
    content:
      '\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Oood9OBeYQzVldK3RDAQ-g.jpeg"><figcaption>Mock Completed Dutch Word Clock — Accurate to the Minute</figcaption></figure><p>In my spare time, I created a word clock using Arduino. I designed it in Fusion 360 and printed it on the Bambu X1C. Many word clocks you find online have only 5-minute accuracy, which I didn’t like. My goal was to build one from scratch with minute accuracy in Dutch. To achieve this, I had to learn soldering, Arduino programming, and Fusion 360 — skills I had little experience with — making this project a great challenge.</p>\n<p><strong>Prototyping in TypeScript</strong></p>\n<p>Before starting the physical build, I planned everything out and <a href="https://sanderdesnaijer.github.io/typescript-dutch-wordclock/">created a prototype</a> in TypeScript. This allowed me to figure out how to achieve minute accuracy and arrange Dutch words sensibly on the grid. The prototype also helped generate data that I later used in the Arduino C++ code. Since I wasn’t familiar with C++, I researched where to start and found inspiration in a video by Leandro Linares, who upcycled a vintage clock into an Arduino word clock. Although his version had 5-minute accuracy, it gave me a strong foundation to improve upon.</p>\n<figure><img alt="Prototype dutch word clock showing index number" src="https://cdn-images-1.medium.com/max/970/1*iZ0YrsjFTHNI39DXJHY1gQ.png"><figcaption>Typescript prototype</figcaption></figure><p>The prototype was invaluable in refining the layout and fixing logical errors quickly. I used individually addressable LEDs arranged in a snake-like pattern on a 13x12 grid. For example, the first row was indexed from 0 to 12, the second from 25 to 13, the third from 26 to 39, and so on. I ultimately generated a multidimensional grid for every minute of the hour, mapping word positions to LED indices. For instance, at 2:13, the text reads “dertien over [currentHour]” (“thirteen past [currentHour]”). The prototype made it easy to determine which LEDs should light up.</p>\n<p><strong>Electronics &amp; Soldering</strong></p>\n<p>After finalising the prototype, I moved on to the electronics. Since I was new to this, I debugged every step carefully. My LED strip was about 5 meters long, so before cutting it into smaller pieces, I tested it with an Arduino example sketch to ensure it worked. Once confirmed, I proceeded to cut and solder the strips together.</p>\n<p>This step proved more difficult than expected. I struggled for a week with soldering — using different temperatures, flux, and techniques — but the solder wouldn’t stick properly. I eventually discovered that the quality of the solder itself made a huge difference. Upgrading to a better soldering material solved the problem. After connecting each new strip (13 in total), I tested it to catch any issues early. The final strip had 156 LEDs, all functioning correctly with the demo code.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*mTY0gzSDF1Ghw3hFSBgecg.jpeg"><figcaption>All the strips joined with the demo code</figcaption></figure><p><strong>3D Modeling, Coding &amp; Printing</strong></p>\n<p>With the electronics working, I moved on to designing the case in Fusion 360. I started by ensuring that one LED strip fit correctly. After a couple of attempts, I got the right dimensions. I then laid a sheet of paper over the LEDs and sketched the letter positions.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*2jWZ807bRC8xQstPNY76Kw.jpeg"><figcaption>Finding the right dimensions for a row of leds</figcaption></figure><p>At this point, I transitioned to the Arduino code. Porting the TypeScript logic to C++ was straightforward; I simply logged the arrays in JavaScript and used the data in Arduino. One challenge was that C++ requires uniform row lengths in multidimensional arrays. I solved this by padding unused elements with -1. Converting the logic to determine which LEDs should light up was then just a matter of simple loops and conditions.</p>\n<p>For the time I used a RTC (real time clock) module, to keep track of the time even when the Arduino has no power.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/955/1*097FxjefZkDVS9P4PGRQFw.jpeg"><figcaption>Printed grid with word clock code</figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/960/1*lcFWHWLoraFBvotTS8tAgw.jpeg"><figcaption>A paper with some written letters to make sense of the lights</figcaption></figure><p>With the letters and code ready, I ran the first full test. Most lights worked, but a few didn’t due to bad solder joints, which I fixed. The next step was building the rest of the case. This involved trial and error, as I initially didn’t leave enough space for wires, the Arduino, or the clock module. Adjusting these each time in Fusion 360 was frustrating until I discovered <em>variables</em>, which allowed me to change dimensions in one place instead of manually updating multiple values. This way I could easy make smaller prints of sections to try out if it fits before printing the complete model.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*C_Omaf0wffDczbrz7R7JMg.jpeg"></figure><p><strong>Final Touches &amp; Improvements</strong></p>\n<p>For the front panel, I wanted interchangeable letters to allow different fonts for varying moods. I used a monospaced font to evenly space the letters. The first print fit well but had an issue — letters with enclosed areas (e.g., “a,” “q,” “o”) lost their inner sections. I solved this by slightly cutting the inner shapes to keep them connected, which also gave the clock a unique style.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/960/1*MGX0pIpvCqbgJepaba4H3A.jpeg"><figcaption>Failed print of letters</figcaption></figure><a href="https://medium.com/media/107daabc1e1ef4c4559f30eadf698b01/href">https://medium.com/media/107daabc1e1ef4c4559f30eadf698b01/href</a><p>In the end, the clock worked and I was happy with it. There are still areas for improvement, such as reducing cable length, adding adjustable time settings, implementing more colour effects, improving light diffusion, supporting standard LED strips, and creating an English version. Despite the challenges, this project was an incredible learning experience, and I’m excited to refine it further.</p>\n<a href="https://medium.com/media/c17f2b5eeb41c8cf64d888735c757e1b/href">https://medium.com/media/c17f2b5eeb41c8cf64d888735c757e1b/href</a><figure><img alt="" src="https://cdn-images-1.medium.com/max/960/1*b6_VwLcVZEl7jOB3VuBehA.jpeg"><figcaption>The finished product in the back</figcaption></figure><p>Links:</p>\n<ul>\n<li><a href="https://sanderdesnaijer.github.io/typescript-dutch-wordclock/">prototype demo</a></li>\n<li><a href="https://github.com/sanderdesnaijer/arduino-dutch-wordclock">arduino code</a></li>\n</ul>\n<img src="" width="1" height="1" alt="">\n',
    enclosure: {},
    categories: ["prototyping", "diy-projects", "arduino", "3d-printing"],
  },
];
